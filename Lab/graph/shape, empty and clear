template<class T>
string DGraph<T>::shape() {
    //TODO: return the string with format: [Vertices: <numOfVertex>, Edges: <numOfEdge>]
    return "[Vertices: " + std::to_string(this->countVertex) + ", Edges: " + std::to_string(this->countEdge) + "]";
}

template<class T>
bool DGraph<T>::empty() {
    //TODO: return if graph is empty (it doesn't have any vertex and edge)
    return this->countVertex == 0;
}

template<class T>
void DGraph<T>::clear() {
    //TODO: remove all edges and vertices of graph.
    while (this->nodeList != nullptr) {
        VertexNode* t = this->nodeList;
        this->nodeList = this->nodeList->next;
        delete t;
    }
    this->countVertex = 0;
    this->countEdge = 0;
}