void bfs(vector<vector<int>> graph, int start) {
    vector<bool> visited(graph.size(), false); // Mảng để theo dõi các đỉnh đã được thăm
    queue<int> q; // Hàng đợi cho BFS

    visited[start] = true; // Đánh dấu đỉnh bắt đầu là đã thăm
    q.push(start); // Đưa đỉnh bắt đầu vào hàng đợi

    while (!q.empty()) {
        int current = q.front(); // Lấy đỉnh ở đầu hàng đợi
        q.pop(); // Loại bỏ đỉnh khỏi hàng đợi

        cout << current << " "; // In ra đỉnh hiện tại

        // Duyệt qua tất cả các đỉnh kề của đỉnh hiện tại
        for (int neighbor : graph[current]) {
            if (!visited[neighbor]) { // Nếu đỉnh kề chưa được thăm
                visited[neighbor] = true; // Đánh dấu là đã thăm
                q.push(neighbor); // Đưa đỉnh kề vào hàng đợi
            }
        }
    }
}

// hay

void bfs(vector<vector<int>> graph, int start)
{
    int numVertices = graph.size();
    bool *visited = new bool[numVertices];
    for (int i = 0; i < numVertices; i++)
        visited[i] = false;

    queue<int> myQueue;
    bool isFirst = true;
    visited[start] = true;
    myQueue.push(start);

    while (!myQueue.empty())
    {
        start = myQueue.front();
        if (isFirst)
        {
            cout << start;
            isFirst = false;
        }
        else
            cout << " " << start;
        myQueue.pop();

        int outDegree = graph[start].size();
        for (int j = 0; j < outDegree; ++j)
        {
            int temp = graph[start][j];
            if (!visited[temp])
            {
                visited[temp] = true;
                myQueue.push(temp);
            }
        }
    }
    delete[] visited;
}