int secondsToBeRotten(vector<vector<int>> &grid)
{
    int rows = grid.size();
    int colums = grid[0].size();
    int seconds = 0;
    queue<pair<int, int>> rotten;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < colums; j++)
        {
            if (grid[i][j] == 2)
            {
                rotten.push({i, j});
            }
        }
    }

    while (!rotten.empty())
    {
        int size = rotten.size();
        for (int i = 0; i < size; i++)
        {
            pair<int, int> current = rotten.front();
            rotten.pop();

            int x = current.first;
            int y = current.second;

            if (x + 1 < rows && grid[x + 1][y] == 1)
            {
                grid[x + 1][y] = 2;
                rotten.push({x + 1, y});
            }
            if (x - 1 >= 0 && grid[x - 1][y] == 1)
            {
                grid[x - 1][y] = 2;
                rotten.push({x - 1, y});
            }
            if (y + 1 < colums && grid[x][y + 1] == 1)
            {
                grid[x][y + 1] = 2;
                rotten.push({x, y + 1});
            }
            if (y - 1 >= 0 && grid[x][y - 1] == 1)
            {
                grid[x][y - 1] = 2;
                rotten.push({x, y - 1});
            }
        }
        if (!rotten.empty())
        {
            seconds++;
        }
    }

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < colums; j++)
        {
            if (grid[i][j] == 1)
            {
                return -1;
            }
        }
    }

    return seconds;
}